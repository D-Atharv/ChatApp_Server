generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  email          String         @unique
  username       String         @unique
  password       String
  photoUrl       String? // Optional field to store the URL or path of the user's photo
  conversations  Conversation[] @relation("UserConversations")
  messages       Message[]      @relation("UserMessages")
  metadata       UserMetadata[] @relation("UserMetadataOwner") // Added relation for metadata
  targetMetadata UserMetadata[] @relation("UserMetadataTarget") // Added relation for target metadata
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Conversation {
  id           String    @id @default(uuid())
  participants User[]    @relation("UserConversations")
  messages     Message[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id             String       @id @default(uuid())
  content        String
  senderId       String
  sender         User         @relation("UserMessages", fields: [senderId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model UserMetadata {
  id           String   @id @default(uuid())
  userId       String // ID of the user who is saving the metadata
  targetUserId String // ID of the user about whom the metadata is saved
  nickname     String? // Optional field for custom name or nickname
  user         User     @relation("UserMetadataOwner", fields: [userId], references: [id])
  targetUser   User     @relation("UserMetadataTarget", fields: [targetUserId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
