generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(191)
  email      String       @unique
  image      String? // URL or path to the user's image (photo)
  createdAt  DateTime     @default(now())
  groups     Group[]      @relation("GroupCreator") // Relation back to Group as creator
  groupUsers GroupUsers[]
  messages   Message[]

  @@map("users")
}

model Group {
  id          String       @id @default(uuid()) @db.Uuid
  title       String? // Optional: If it's a group chat, it has a title; otherwise, it's null for one-on-one chats
  isGroupChat Boolean      @default(false) // True for group chat, false for one-on-one
  creator     User         @relation("GroupCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   Int
  users       GroupUsers[]
  messages    Message[]
  createdAt   DateTime     @default(now())

  @@map("groups")
}

model GroupUsers {
  id       Int      @id @default(autoincrement())
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId  String   @db.Uuid
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  joinedAt DateTime @default(now())

  @@map("group_users")
}

model Message {
  id        String   @id @default(uuid()) @db.Uuid
  content   String
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  Int
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String   @db.Uuid
  createdAt DateTime @default(now())

  @@map("messages")
}
